<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="DRAW" id="0">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">xoffset = view_xview[0];
yoffset = view_yview[0];
xsize = view_wview[0];
ysize = view_hview[0];

// special thanks to wareya for the warhud HP cross code &amp; images
var sprite_xpos, sprite_ypos, icon_xpos, icon_ypos, hppixels;

draw_set_alpha(1);
draw_rectangle_color(view_xview,view_yview,view_xview+xsize,view_yview+20,c_black,c_black,c_black,c_black,0);
draw_rectangle_color(view_xview,view_yview+ysize-20,view_xview+xsize,view_yview+ysize,c_black,c_black,c_black,c_black,0);

draw_set_color(c_white);
if (tracking)
{
    draw_name_badges(xoffset+50, yoffset+ysize-16, player, 1);
    if (player.object == -1)
        break;
    if (global.myself.team == TEAM_SPECTATOR and player.object.maxHp != 0)
    {
        sprite_xpos = -2;
        sprite_ypos = ysize-62;
        icon_xpos = sprite_xpos;
        icon_ypos = sprite_ypos + 20;
        draw_sprite_ext(SpectatorHealthCross, 0, xoffset+sprite_xpos, yoffset+sprite_ypos, 2, 2, 0, c_white, 1);
        hppixels = player.object.hp/player.object.maxHp*17;
        draw_sprite_part_ext(SpectatorHealthFill,0,0,(17-hppixels)+10,43,hppixels+1,xoffset+icon_xpos, yoffset+icon_ypos+(17-hppixels)*2,2,2,c_red,1);
        draw_sprite_part_ext(SpectatorHealthFill,0,0,(17-hppixels)+10,43,hppixels+1,xoffset+icon_xpos, yoffset+icon_ypos+(17-hppixels)*2,2,2,c_green,player.object.hp/player.object.maxHp);
    }
    draw_sprite(SpectatorCrosshairS, player.team,
                round(player.object.x) + cos(degtorad(player.object.aimDirection))*player.object.aimDistance,
                round(player.object.y) - sin(degtorad(player.object.aimDirection))*player.object.aimDistance);
    
}

if (global.myself != -1)
{
    if ((global.myself.alarm[5] &gt; 0) and (global.myself.team != TEAM_SPECTATOR))
    {
        draw_set_valign(fa_center);
        draw_set_halign(fa_left);
        if (!instance_exists(ArenaHUD))
            draw_text(xoffset+10, yoffset+10,'Respawn in ' +string(ceil(global.myself.alarm[5]/30*global.delta_factor))+ ' second(s).')
        else
            draw_text(xoffset+10, yoffset+10,'No Respawning in Arena');
    }
}
</argument>
      </arguments>
    </action>
  </actions>
</event>
